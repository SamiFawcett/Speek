'use strict';

var _geocoding = require('./api/geocoding');

var _routing = require('./api/routing');

var _search = require('./api/search');

var _optimization = require('./api/optimization');

var _webApiCall = require('./util/webApiCall');

function create() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var apiCall = (0, _webApiCall.webApiCall)(options);

  function createApiMethod(config) {
    return function (query, callback) {
      var apiQuery = config.validator(query);
      apiQuery.options = config.options;

      return apiCall(config.url, apiQuery, callback);
    };
  }

  return {
    geocode: createApiMethod(_geocoding.geocode),
    geocodeNorthAmerica: createApiMethod(_geocoding.geocodeNorthAmerica),
    reverseGeocode: createApiMethod(_geocoding.reverseGeocode),
    reverseGeocodeNorthAmerica: createApiMethod(_geocoding.reverseGeocodeNorthAmerica),
    directions: createApiMethod(_routing.directions),
    matching: createApiMethod(_routing.matching),
    roadInfo: createApiMethod(_routing.roadInfo),
    distanceMatrix: createApiMethod(_routing.distanceMatrix),
    autocomplete: createApiMethod(_search.autocomplete),
    autocompleteDetails: createApiMethod(_search.autocompleteDetails),
    optimization: createApiMethod(_optimization.optimization),
    sendToNavi: createApiMethod(_routing.sendToNavi)
  };
};

module.exports = {
  create: create
};